@model RaceMaker.Models.CreateRace

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div align="center"><h2>@Html.DisplayFor(model => model.RaceName)</h2></div>

<div align="center">

    <hr />
    <dl class="dl-horizontal" align="center">

        <dt>
            @Html.DisplayNameFor(model => model.RaceLocation)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RaceLocation)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RaceDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RaceDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RaceDistance)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RaceDistance)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RaceCost)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RaceCost)
        </dd>

    </dl>
</divalign="center">
<p>
    @*@Html.ActionLink("Upload Race File", "UploadFile", new { id = Model.ID }) |*@
    @*@Html.ActionLink("Edit", "Edit", new { id = Model.ID }) |*@
    @Html.ActionLink("Back to List", "Index", new { id = Model.ID }) |
    @*@Html.ActionLink("Display Entries", "DisplayEntries", new { id = Model.ID }) |*@
    @Html.ActionLink("Sign Up", "Create", "RaceSignUps", new { RaceID = Model.ID }, null)
    @*@Html.ActionLink("GetMap", "GeoCode", new { id = Model.ID })*@
</p>

<script type="text/javascript">

    var myLatArray = [];
    var myLngArray = [];

    @foreach (var d in Model.RaceCoursePoints)
    {
        @:myLatArray.push("@d.Latitude");
        @:myLngArray.push("@d.Longitude");
    }

    alert(myLatArray);
    alert(myLngArray);
</script>


@*<script>     
    var pointsTest = [];
    (var point in Model.RaceCoursePoints)
    {
        test(point);
       //  pointsTest.push(point.Latitude, point.Longitude);
    }
    function test(pointC) {
        console.log("sup");
    }

    console.log('pointsTest', pointsTest);
    @*function getPoint(i) {
        return { location : new google.maps.LatLng(@Model.RaceCoursePoints[i].Latitude, @Model.RaceCoursePoints[i].Longitude)};
    }*@       
@*</script>*@


<p>
    @{
        string link = Model.FileName;
        string path = Model.FilePath;
        string tag = "<a href=" + path + ">" + link + "</a>";
    }

    @*@Html.Raw(tag)*@
</p>

<a href="@(Url.Content("~/Files/") + Model.FileName)">@Model.FileName</a>

@*<style>
        /* Always set the map height explicitly to define the size of the div
          * element that contains the map. */
        #map {
            height: 400px;
            width: 400px;
        }
        /* Optional: Makes the sample page fill the window. */
    </style>*@

@*<div class="row">
    <div id="map"></div>
    <script>
        var map;
        var address = "Milwaukee, WI";
          function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: address,

              zoom: 8
            });
          }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUuekNsUOEs9hozBj9fL18uCiXqusrjog&callback=initMap"
            async defer></script>

    </div>*@

@*<style>
        /* Always set the map height explicitly to define the size of the div
           * element that contains the map. */
        #map {
            height: 400px;
            width: 100%;
        }
        /* Optional: Makes the sample page fill the window. */

        #floating-panel {
            /*position: absolute;*/
            top: 10px;
            left: 25%;
            z-index: 5;
            background-color: #fff;
            padding: 5px;
            border: 1px solid #999;
            text-align: center;
            font-family: 'Roboto','sans-serif';
            line-height: 30px;
            padding-left: 10px;
        }
    </style>
    <div class="row">
        <div id="map"></div>
        <div id="floating-panel">
            <input id="address" type="textbox" value="Milwaukee, WI">
            <input id="submit" type="button" value="Show Location">
        </div>
        <script>
            function initMap() {
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 8,
                    center: { lat: 43.038902, lng: -87.906471 }
                });
                var geocoder = new google.maps.Geocoder();

                document.getElementById('submit').addEventListener('click', function () {
                    geocodeAddress(geocoder, map);
                });
            }
            function geocodeAddress(geocoder, resultsMap) {
                var address = document.getElementById('address').value;
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status === 'OK') {
                        resultsMap.setCenter(results[0].geometry.location);
                        var marker = new google.maps.Marker({
                            map: resultsMap,
                            position: results[0].geometry.location
                        });
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }
        </script>
        <script async defer
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUuekNsUOEs9hozBj9fL18uCiXqusrjog&callback=initMap">
        </script>
    </div>*@


<style>
    #map {
        height: 400px;
        width: 100%;
    }
    /* Optional: Makes the sample page fill the window. */

    #floating-panel {
        /*position: absolute;*/
        top: 10px;
        left: 25%;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }
</style>
<div class="row">
    
    <body onLoad="getCoordinates()">
    <body>
        <div id="map"></div>
        <div id="right-panel">
            
            <input type="button" value="Get Course Map" onClick="getCoordinates()">
            @*<p>Total Distance: <span id="total"></span></p>*@
        </div>
        <script>
      function initMap() {
          var centerLat = @Html.Raw(Json.Encode(Model.CenterLat));
          var centerLong = @Html.Raw(Json.Encode(Model.CenterLong));
          var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 4,
          center: { lat: 43.0389, lng: 87.9065 }
        });

        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer({
          //draggable: true,
          map: map,
          panel: document.getElementById('right-panel')
        });

        //directionsDisplay.addListener('directions_changed', function() {
        //  computeTotalDistance(directionsDisplay.getDirections());
        //});
          //origin: { centerLat, centerLong }
          //destination: {centerLat, centerLong}
          //var raceDataPoints = db.RaceCoursePoints.Where(x => x.CreateRace.ID == id);

        @*function getCoordinates() { //takes 2 parameters

            @*var id = @Html.Raw(Json.Encode(Model.ID));*@
            @*var obj = @Html.Raw(Json.Encode(Model));*@
            @*$.ajax({
                url: '@Url.Action("GetRaceCoursePoints", "CreateRaces")',
                type: "get",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({id: id}), //pass RaceID in here
                success: function () {
                    alert("Success! :)");
                },
                error: function () {
                    alert("Error! :(");
                }
            });
        }*@


          var origin = new google.maps.LatLng(@Model.RaceCoursePoints[0].Latitude, @Model.RaceCoursePoints[0].Longitude);
          var destination = new google.maps.LatLng(@Model.RaceCoursePoints[Model.RaceCoursePoints.Count - 1].Latitude, @Model.RaceCoursePoints[Model.RaceCoursePoints.Count - 1].Longitude);

          waypoints = new Array();

          for(i = 1; i < myLatArray.length -2; i++){
              waypoints.push({
                  location: new google.maps.LatLng(myLatArray[i], myLngArray[i]),
              });
          }

          @*{@i = 1;}
          for(let i = 1; i<@Model.RaceCoursePoints.Count -1; i++){
              waypoints.push({
                  location: new google.maps.LatLng(@Model.RaceCoursePoints[i].Latitude, @Model.RaceCoursePoints[i].Longitude),
              });*@

              @*console.log("JS I", i);
              console.log("CSharp I", @i);*@
                  //can I seperate the loop from the push method
                  //design so it isn't writing over itself
                  //or its pushing the same point multiple times
                  //and destination isn't defined
                  //currently pushes the item at 1 index mutliple times
          //}
          //foreach()

              @*waypoints.push({
                  location: new google.maps.LatLng(@Model.RaceCoursePoints[1].Latitude, @Model.RaceCoursePoints[1].Longitude),
                  location: new google.maps.LatLng(@Model.RaceCoursePoints[2].Latitude, @Model.RaceCoursePoints[2].Longitude),
              });*@

          displayRoute(origin, destination, directionsService,
            directionsDisplay);
      }

      function displayRoute(origin, destination, service, display) {
                @*var waypoint1 = new google.maps.LatLng(@Model.RaceCoursePoints[1].Latitude, @Model.RaceCoursePoints[1].Longitude);*@

        service.route({
          origin: origin,
          destination: destination,
          waypoints : waypoints,
          travelMode: 'WALKING',
          avoidTolls: true
        }, function(response, status) {
          if (status === 'OK') {
            display.setDirections(response);
          } else {
            alert('Could not display directions due to: ' + status);
          }
        });
      }

      //function save_waypoints()
      //    {
      //        var w=[],wp;
      //        var rleg = ren.directions.routes[0].legs[0];
      //        data.start = {'lat': rleg.start_location.lat(), 'lng':rleg.start_location.lng()}
      //        data.end = {'lat': rleg.end_location.lat(), 'lng':rleg.end_location.lng()}
      //        var wp = rleg.via_waypoints
      //        for(var i=0;i<wp.length;i++)w[i] = [wp[i].lat(),wp[i].lng()]
      //        data.waypoints = w;

      //        var str = JSON.stringify(data)

      //        var jax = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
      //        jax.open('POST','process.php');
      //        jax.setRequestHeader('Content-Type','application/x-www-form-urlencoded');
      //        jax.send('command=save&mapdata='+str)
      //        jax.onreadystatechange = function(){ if(jax.readyState==4) {
      //            if(jax.responseText.indexOf('bien')+1)alert('Updated');
      //            else alert(jax.responseText)
      //        }}
      //    }

      function computeTotalDistance(result) {
        var total = 0;
        var myroute = result.routes[0];
        for (var i = 0; i < myroute.legs.length; i++) {
          total += myroute.legs[i].distance.value;
        }
        total = total / 1000;
        document.getElementById('total').innerHTML = total + ' km';
      }
        </script>
        <script async defer
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUuekNsUOEs9hozBj9fL18uCiXqusrjog&callback=initMap">
        </script>
    </body>
    <script>
        function getCoordinates() { //takes 2 parameters
            alert("Called Get Coordinates Function")
            alert(@Model.ID)
            @*var id = '@Html.Raw(Json.Encode(Model.ID))';*@
            @*var id = {@Model.ID}; //doesn't pull the model.id*@
            @*var id = @Html.Raw(Json.Encode(Model.ID));*@
            var id = @Model.ID;
            $.ajax({
                url: '@Url.Action("GetRaceCoursePoints", "CreateRaces" )',
                type: "get",
                contentType: "application/json; charset=utf-8",
                data: ({id: id}),
                success: function () {
                    alert("Success! :)");
                },
                error: function () {
                    alert("Error! :(");
                }
            });
        }
    </script>
        @*<script>
            function GetRacePointsAsArray() {
                alert("Called Get RacePointsArray Function")
                alert(@Model.ID)
                debugger;
                var id = @Model.ID;
                $.ajax({
                    type: "get",
                    url: '@Url.Action("GetRaceCoursePoints", "CreateRaces" )',
                    data: ({id: id}),
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        debugger;
                        alert(result)
                    },
                    error: function (response) {
                        debugger;
                        alert('error');
                    }
                });

            }
        </script>*@


    </html>
