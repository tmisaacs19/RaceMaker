
@model RaceMaker.Models.CreateRace
@*<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script src="json2.js"></script>*@
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div align="center"><h2>@Html.DisplayFor(model => model.RaceName)</h2></div>
<div class="container-fluid body-content">
    <hr />
    <dl class="dl-horizontal">

        <div class="container-fluid body-content" align='center'>
            <dt>
                @Html.DisplayNameFor(model => model.RaceLocation)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RaceLocation)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RaceDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RaceDate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RaceDistance)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RaceDistance)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RaceCost)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RaceCost)
            </dd>
        </div>
        @*<div style='float:right;'>
            <img src="~/Images/@Model.ImageName" alt="RaceImage" />
        </div>*@
    </dl>
</div>
<div class="container-fluid body-content" align='center'>
    <p>
        @Html.ActionLink("Upload Race File", "UploadFile", new { id = Model.ID }) |
        @Html.ActionLink("Edit", "Edit", new { id = Model.ID }) |
        @Html.ActionLink("Back to List", "Index", new { id = Model.ID }) |
        @Html.ActionLink("Display Entries", "DisplayEntries", new { id = Model.ID }) |
        @Html.ActionLink("Export Entries", "ExportDataFromDatabase", new { id = Model.ID }) |
        @Html.ActionLink("Upload Race Logo", "UploadImage", new { id = Model.ID })
        @*@Html.ActionLink("Sign Up", "Create", "RaceSignUps", new { RaceID = Model.ID }, null)*@
        @*@Html.ActionLink("GetMap", "GeoCode", new { id = Model.ID })*@
    </p>
</div>
<p>
    @{
        string link = Model.FileName;
        string path = Model.FilePath;
        string tag = "<a href=" + path + ">" + link + "</a>";
    }
    @*@Html.Raw(tag)*@
</p>
<a href="@(Url.Content("~/Files/") + Model.FileName)">@Model.FileName</a>
@*<style>
    #map {
        height: 400px;
        width: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    #floating-panel {
        /*position: absolute;*/
        top: 10px;
        left: 25%;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }*@
@*</style>
    <div class="row">
        <body onLoad="goma()">
            <div id="map"></div>
            <div id="right-panel">
                <input type="button" value="Save Course Route" onClick="location.href='@Url.Action("SaveMap", "CreateRaces", new { id = Model.ID, centerLat = 43.0389, centerLong = 87.9065}, null)'" />
                <p>Total Distance: <span id="total"></span></p>
            </div>
            <script>
      function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 4,
          center: { lat: 43.0389, lng: 87.9065 }
        });
        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer({
          draggable: true,
          map: map,
          panel: document.getElementById('right-panel')
        });
        directionsDisplay.addListener('directions_changed', function() {
          computeTotalDistance(directionsDisplay.getDirections());
        });
        displayRoute('313 N. Plakinton Ave Milwaukee, WI', '313 N. Plakinton Ave Milwaukee, WI', directionsService,
            directionsDisplay);
      }
      function displayRoute(origin, destination, service, display) {
        service.route({
          origin: origin,
          destination: origin,
          waypoints: [{location: '1936 N. Cambridge Ave Milwaukee, WI 53202'}, {location: '1858 N. Commerce Street Milwaukee, WI 53212'}],
          travelMode: 'WALKING',
          avoidTolls: true
        }, function(response, status) {
          if (status === 'OK') {
            display.setDirections(response);
          } else {
            alert('Could not display directions due to: ' + status);
          }
        });
      }
      google.maps.event.addListener(map, "rightclick", function(event) {
          placeMarker(event.latLng);
      });
      function placeMarker(location) {
          var newmarker = new google.maps.Marker({
              position: location,
              map: map,
              draggable: true
          });
      google.maps.event.addListener(newmarker, 'click', function() {
          var form =
              '<div id="bodyContent">'+
              '<b>New Map</b>' +
              '<form method="post">'+
              '<table>'+
              '<tr><td>Name place :<input type="text" name="name"/></td></tr>'+
              '<tr><td>Latitude :<input type="text" name="latitude" value="' + newmarker.position.lat() + '"/></td></tr>'+
              '<tr><td>Longitude: <input type="text" name="longitude" value="' + newmarker.position.lng() + '"/></td></tr>'+
              '<tr><td><input type="submit" value="save"></td></tr>'+
              '</table>'+
              '</form>'+
              '</div>';
          var infowindow = new google.maps.InfoWindow({
              content: form,
              maxWidth :500
          });
          infowindow.open(map,newmarker);
      });

      function computeTotalDistance(result) {
        var total = 0;
        var myroute = result.routes[0];
        for (var i = 0; i < myroute.legs.length; i++) {
          total += myroute.legs[i].distance.value;
        }
        total = total / 1000;
        document.getElementById('total').innerHTML = total + ' km';
      }
            </script>
            <script async defer
                    src="">
            </script>
        </body>
        </html>*@
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUuekNsUOEs9hozBj9fL18uCiXqusrjog"></script>
    <script type="text/javascript">
var geocoder = new google.maps.Geocoder();
var newmarker;
function geocodePosition(pos) {
  geocoder.geocode({
    latLng: pos
  }, function(responses) {
    if (responses && responses.length > 0) {
      updateMarkerAddress(responses[0].formatted_address);
    } else {
      updateMarkerAddress('Cannot determine address at this location.');
    }
  });
}
function updateMarkerStatus(str) {
  document.getElementById('markerStatus').innerHTML = str;
}
function updateMarkerPosition(latLng) {
  document.getElementById('info').innerHTML = [
    latLng.lat(),
    latLng.lng()
  ].join(', ');
}
function updateMarkerLat(latLng) {
  document.getElementById('latnew').innerHTML = [
     latLng.lat()
  ];
}
function updateMarkerLng(latLng) {
  document.getElementById('lngnew').innerHTML = [
    latLng.lng()
  ];
}
function updateMarkerAddress(str) {
  document.getElementById('address').innerHTML = str;
}
  function initialize() {
      var latLng = new google.maps.LatLng(43.0389,87.9065);
      var map = new google.maps.Map(document.getElementById('mapCanvas'), {
          zoom: 4,
          center: { lat: 43.0389, lng: 87.9065 },
          mapTypeId: google.maps.MapTypeId.ROADMAP
      });
      var pointNumber = 0;
  google.maps.event.addListener(map, "rightclick", function(event) {
        placeMarker(event.latLng);
    });
  function placeMarker(location) {
      var newmarker = new google.maps.Marker({
          position: location,
          map: map,
          draggable: true,
      });
      var lat = newmarker.position.lat();
      var lng = newmarker.position.lng();
      var testNumber = 12;
      pointNumber = pointNumber + 1;
      var form =
              '<div id="bodyContent">' +
              '<b>New Map</b>' +
              '<form action="">' +
              '<table>' +
              /*'<tr><td>Name place :<input type="text" name="name" value="' + testNumber + '"/></td></tr>' +*/
              '<tr><td>Latitude :<input type="text" name="latitude" value="' + lat + '"/></td></tr>' +
              '<tr><td>Longitude: <input type="text" name="longitude" value="' + lng + '"/></td></tr>' +
              '<tr><td><button type = "button" value="Save Course Point" onClick="saveCoordinates(' + @Model.ID + ',' + lat + ',' + lng + ')"  ></td></tr>' +      //saves a form for the current marker
              '</table>' +
              '</form>' +
              '</div>';
      var infowindow = new google.maps.InfoWindow({
          content: form,
          maxWidth: 500
      });
      google.maps.event.addListener(newmarker, 'click', function () {
          infowindow.open(map, newmarker);
          //marker1.openInfoWindowHtml('Some text', {noCloseOnClick: 'false'});
          //var point = marker.getPosition();
      });
      // Update current position info.
      updateMarkerPosition(latLng);
      updateMarkerLat(latLng);
      updateMarkerLng(latLng);
      geocodePosition(latLng);
      // Add dragging event listeners.
      google.maps.event.addListener(newmarker, 'dragstart', function () {
          updateMarkerAddress('Dragging...');
      });
      google.maps.event.addListener(newmarker, 'drag', function () {
          updateMarkerStatus('Dragging...');
          updateMarkerPosition(newmarker.getPosition());
          updateMarkerLat(newmarker.getPosition());
          updateMarkerLng(newmarker.getPosition());
      });
      google.maps.event.addListener(newmarker, 'dragend', function () {
          updateMarkerStatus('Drag ended');
          geocodePosition(newmarker.getPosition());
          updateMarkerLat(newmarker.getPosition());
          updateMarkerLng(newmarker.getPosition());
      });
  }
}
google.maps.event.addDomListener(window, 'load', initialize);
    </script>
    <script>
        function saveCoordinates(id, lat, lng) { //takes 2 parameters
            alert("This saveCoordinates Function Called")
            $.ajax({
                url: '@Url.Action("SaveRaceCoursePoints", "CreateRaces")',
                type: "post",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ id: id, lat: lat, lng: lng }),
                success: function () {
                    alert("Success! :)");
                },
                error: function () {
                    alert("Error! :(");
                }
            });
          }
    </script>
</head>
<body>

    <style>
        #mapCanvas {
            height: 400px;
            width: 100%;
        }

        #infoPanel {
            float: left;
            margin-left: 10px;
        }

            #infoPanel div {
                margin-bottom: 5px;
            }
    </style>
    <div id="mapCanvas"></div>
    <div id="infoPanel">
        <div id="right-panel">
            <input type="button" value="Save Course Route" onClick="location.href='@Url.Action("SaveMap", "CreateRaces", new { id = Model.ID, @*lat = newmarker.position.lat(), lng = newmarker.position.lat()*@}, null)'" />
            <p>Total Distance: <span id="total"></span></p>
        </div>
        <b>Marker status:</b>
        <div id="markerStatus"><i>Click and drag the marker.</i></div>
        <b>Current position:</b>
        <div id="info"></div>
        <div id="latnew"></div><div id="lngnew"></div>
        @*<b>Closest matching address:</b>
            <div id="address"></div>*@
    </div>
</body>
</html>
